#!/usr/bin/env bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
VERSION=${TRAVIS_TAG:-latest}

set -eu

readonly EXTENSIONS=(bash dialog gnupg)

readonly MIRROR_URL=http://tinycorelinux.net/8.x/x86
readonly DIST="${DIR}/dist"
readonly BUILD="${DIR}/build"
readonly DOWNLOADS="${DIR}/downloads"
readonly ISOFILE="gpg-tools-${VERSION}.iso"

function build_iso() {
  prepare
  explode_iso
  download_extensions
  unpack_extensions
  customize
  repack_core
  remaster_iso
  calculate_checksum
}

function prepare() {
  rm -rf ${DIST}
  rm -rf ${BUILD}
  mkdir -p ${DIST}
  mkdir -p ${BUILD}

  [[ ! -d "${DOWNLOADS}" ]] && mkdir -p ${DOWNLOADS}

  return 0
}

function download() {
  local url=$1
  local file=${DOWNLOADS}/${url##*/}

  if [[ ! -f "${file}" ]]; then
    echo "Downloading ${url}"
    wget -q -P ${DOWNLOADS} ${url}
  fi
}

function download_tcz() {
  local tcz=$1
  local baseurl="${MIRROR_URL}/tcz"
  local extension="${baseurl}/${tcz}"

  download "${extension}"
  download "${extension}.dep" || true

  if [[ -f "${DOWNLOADS}/${tcz}.dep" ]]; then
    for dep in $(cat ${DOWNLOADS}/${tcz}.dep)
    do
      download_tcz ${dep}
    done
  fi
  echo "Finished downloading"
}

function explode_iso() {
  local url="${MIRROR_URL}/release/Core-current.iso"
  local iso=${DOWNLOADS}/${url##*/}
  local source=tmp

  download ${url}

  [[ ! -d "${source}" ]] && mkdir -p ${source}

  mount ${iso} ${source} -o loop,ro
  cp -a ${source}/boot ${DIST}
  zcat ${DIST}/boot/core.gz | (cd ${BUILD} && cpio -i -H newc -d)
  umount ${source}
}

function download_extensions() {
  for extension in "${EXTENSIONS[@]}"
  do
    download_tcz "${extension}.tcz"
  done
}

function unpack_extensions() {
  for extension in ${DOWNLOADS}/*.tcz
  do
    echo "Unpacking ${extension}"
    unsquashfs -f -d ${BUILD} ${extension}
  done
}

function repack_core() {
  ldconfig -r ${BUILD}
  (cd ${BUILD} && find | cpio -o -H newc | gzip -2 > ../core.gz)
  advdef -z4 core.gz
}

function remaster_iso() {
  mv core.gz ${DIST}/boot
  mkisofs -l -J -R -V TC-custom -no-emul-boot -boot-load-size 4 \
    -boot-info-table -b boot/isolinux/isolinux.bin \
    -c boot/isolinux/boot.cat -o ${ISOFILE} ${DIST}
}

function calculate_checksum() {
  local md5=($(md5sum ${ISOFILE}))

  echo "remastering done. The md5 checksum of the new iso is: ${md5}"
}

function customize() {
  echo "adding gpgtools"
  cp gpg-tools.sh ${BUILD}/usr/local/bin/
  cp extra.rules ${BUILD}/etc/udev/rules.d/
  echo "eval \$(gpg-agent --pinentry-program /usr/local/bin/pinentry-tty --daemon)" >> ${BUILD}/etc/profile
}

function qemu() {
  qemu-system-x86_64 -device virtio-rng-pci -cdrom ${ISOFILE}
}

function show_usage {
    echo "Usage: $0 iso"
    exit 1
}

CMD=${1:-}
shift || true
case ${CMD} in
  qemu) qemu ;;
  iso) build_iso ;;
  *) show_usage ;;
esac
